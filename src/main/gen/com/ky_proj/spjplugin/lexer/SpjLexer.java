/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.ky_proj.spjplugin.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.ky_proj.spjplugin.psi.SpjTypes;
import com.intellij.psi.TokenType;
import java.util.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Spj.flex</tt>
 */
class SpjLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_VALUE = 2;
  public static final int CALL_COMMAND = 4;
  public static final int CALL_KEYWORD = 6;
  public static final int DEF_PROCEDURE = 8;
  public static final int CALL_PROCEDURE = 10;
  public static final int INSIDE_ARGUMENTS = 12;
  public static final int INSIDE_NESTED_ARGUMENTS = 14;
  public static final int CALL_CONDITION = 16;
  public static final int INSIDE_CONDITION = 18;
  public static final int INSIDE_FOR_ARGUMENTS = 20;
  public static final int INSIDE_IMPORT = 22;
  public static final int AFTER_ELSE = 24;
  public static final int AFTER_EXCEPT = 26;
  public static final int INSIDE_DOC_COMMENT = 28;
  public static final int INSIDE_DOC_COMMENT_PARAM = 30;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\14\1\1\1\56\1\14\1\2\22\0\1\14\1\43\1\6\1\50\1\0\1\41\1\46\1\0\1\55"+
    "\1\53\2\44\1\51\1\45\1\52\1\44\12\10\2\44\1\42\1\17\1\42\1\44\1\54\32\0\1"+
    "\15\1\13\1\16\3\0\1\23\1\30\1\22\1\27\1\25\1\35\1\0\1\36\1\26\1\0\1\31\1\20"+
    "\1\32\1\4\1\21\1\33\1\0\1\5\1\24\1\7\1\12\1\34\1\37\1\11\1\40\2\0\1\47\10"+
    "\0\1\56\37\0\1\3\202\0\2\56\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\20\0\1\1\2\2\2\1\1\3\1\1\1\4\1\3"+
    "\1\2\1\5\1\6\1\7\12\1\2\10\1\3\2\10"+
    "\1\11\1\12\1\1\1\13\1\14\3\3\1\15\2\16"+
    "\1\17\1\20\1\21\2\22\1\3\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\2\31\1\32\1\33\2\34\1\33"+
    "\1\3\1\35\1\34\2\36\1\3\1\36\2\3\1\37"+
    "\1\40\1\33\1\41\1\42\2\43\1\3\1\44\1\45"+
    "\2\46\1\45\1\47\1\50\1\51\2\52\1\51\1\3"+
    "\1\51\1\53\1\52\2\54\1\3\1\54\2\3\1\55"+
    "\1\51\1\56\2\57\1\3\1\57\1\60\1\61\1\2"+
    "\1\61\1\62\1\63\2\64\2\63\1\65\1\63\2\66"+
    "\1\3\1\67\1\3\2\70\1\71\1\72\2\73\1\74"+
    "\1\75\3\1\1\0\1\76\1\0\2\1\1\0\11\1"+
    "\1\77\10\1\1\11\1\100\1\4\2\101\1\0\1\102"+
    "\1\22\1\103\2\34\1\0\1\104\1\0\1\33\1\0"+
    "\1\105\1\43\1\46\2\52\1\0\1\106\1\0\1\51"+
    "\1\0\1\107\1\53\1\57\1\0\1\61\1\64\1\0"+
    "\1\110\1\66\1\0\1\70\2\72\1\73\4\1\1\111"+
    "\12\1\1\112\4\1\1\112\1\1\1\113\3\1\2\0"+
    "\1\33\4\0\2\51\7\0\1\72\5\1\1\114\5\1"+
    "\1\115\7\1\1\116\5\1\1\117\1\120\1\0\1\72"+
    "\5\1\1\121\3\1\1\122\5\1\1\123\1\1\1\0"+
    "\1\72\1\1\1\124\3\1\1\125\1\126\1\1\1\127"+
    "\3\1\1\0\1\72\1\1\1\130\1\131\1\1\1\132"+
    "\1\72\1\133\1\61\1\134";

  private static int [] zzUnpackAction() {
    int [] result = new int[325];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\215\0\274\0\353\0\u011a\0\u0149"+
    "\0\u0178\0\u01a7\0\u01d6\0\u0205\0\u0234\0\u0263\0\u0292\0\u02c1"+
    "\0\u02f0\0\u031f\0\u034e\0\u037d\0\u03ac\0\u03db\0\u040a\0\u0439"+
    "\0\u031f\0\u0468\0\u031f\0\u031f\0\u0497\0\u04c6\0\u04f5\0\u0524"+
    "\0\u0553\0\u0582\0\u05b1\0\u05e0\0\u060f\0\u063e\0\u066d\0\u069c"+
    "\0\u0497\0\u06cb\0\u06fa\0\u0729\0\u0758\0\u031f\0\u0787\0\u031f"+
    "\0\u031f\0\u07b6\0\u07e5\0\u0814\0\u0843\0\u031f\0\u0872\0\u08a1"+
    "\0\u031f\0\u031f\0\u031f\0\u08d0\0\u08ff\0\u092e\0\u095d\0\u098c"+
    "\0\u031f\0\u031f\0\u09bb\0\u031f\0\u09ea\0\u0a19\0\u0a48\0\u031f"+
    "\0\u0a77\0\u0aa6\0\u0ad5\0\u0b04\0\u0b33\0\u0b62\0\u0b91\0\u0bc0"+
    "\0\u0bef\0\u0c1e\0\u0c4d\0\u0c7c\0\u031f\0\u0cab\0\u031f\0\u031f"+
    "\0\u031f\0\u0cda\0\u0d09\0\u0d38\0\u031f\0\u031f\0\u0d67\0\u0d96"+
    "\0\u0dc5\0\u031f\0\u0df4\0\u031f\0\u0e23\0\u0e52\0\u0e81\0\u0eb0"+
    "\0\u0edf\0\u0f0e\0\u0f3d\0\u0f6c\0\u0f9b\0\u0fca\0\u0ff9\0\u1028"+
    "\0\u1057\0\u1086\0\u031f\0\u031f\0\u10b5\0\u10e4\0\u1113\0\u1142"+
    "\0\u1171\0\u11a0\0\u11cf\0\u11fe\0\u031f\0\u031f\0\u122d\0\u125c"+
    "\0\u128b\0\u12ba\0\u12e9\0\u031f\0\u1318\0\u1347\0\u1376\0\u13a5"+
    "\0\u13d4\0\u1403\0\u1432\0\u1461\0\u1490\0\u14bf\0\u14ee\0\u031f"+
    "\0\u151d\0\u154c\0\u157b\0\u03db\0\u031f\0\u15aa\0\u15d9\0\u1608"+
    "\0\u06cb\0\u1637\0\u1666\0\u1695\0\u16c4\0\u16f3\0\u1722\0\u1751"+
    "\0\u1780\0\u17af\0\u02f0\0\u17de\0\u180d\0\u183c\0\u186b\0\u189a"+
    "\0\u18c9\0\u18f8\0\u1927\0\u1956\0\u031f\0\u0787\0\u031f\0\u1985"+
    "\0\u0814\0\u0814\0\u19b4\0\u031f\0\u0a48\0\u19e3\0\u0ad5\0\u031f"+
    "\0\u1a12\0\u1a41\0\u0bc0\0\u1a70\0\u1a9f\0\u1ace\0\u0df4\0\u1afd"+
    "\0\u0e81\0\u031f\0\u1b2c\0\u1b5b\0\u0f9b\0\u1b8a\0\u1086\0\u1bb9"+
    "\0\u1be8\0\u1c17\0\u1c46\0\u1c75\0\u031f\0\u1ca4\0\u1cd3\0\u1d02"+
    "\0\u1d31\0\u1d60\0\u1d8f\0\u1dbe\0\u1ded\0\u1e1c\0\u1e4b\0\u02f0"+
    "\0\u1e7a\0\u1ea9\0\u1ed8\0\u1f07\0\u1f36\0\u1f65\0\u1f94\0\u1fc3"+
    "\0\u1ff2\0\u2021\0\u2050\0\u207f\0\u20ae\0\u20dd\0\u210c\0\u02f0"+
    "\0\u213b\0\u216a\0\u2199\0\u21c8\0\u21f7\0\u2226\0\u2255\0\u2284"+
    "\0\u0c1e\0\u0c4d\0\u22b3\0\u22e2\0\u2311\0\u2340\0\u0ff9\0\u1028"+
    "\0\u236f\0\u239e\0\u23cd\0\u23fc\0\u242b\0\u245a\0\u2489\0\u24b8"+
    "\0\u24e7\0\u2516\0\u2545\0\u02f0\0\u2574\0\u25a3\0\u25d2\0\u2601"+
    "\0\u2630\0\u02f0\0\u265f\0\u268e\0\u26bd\0\u26ec\0\u271b\0\u274a"+
    "\0\u2779\0\u02f0\0\u216a\0\u27a8\0\u27d7\0\u2806\0\u2835\0\u0df4"+
    "\0\u031f\0\u2864\0\u2893\0\u28c2\0\u28f1\0\u2920\0\u294f\0\u297e"+
    "\0\u02f0\0\u29ad\0\u29dc\0\u2a0b\0\u02f0\0\u2a3a\0\u2a69\0\u2a98"+
    "\0\u2ac7\0\u2af6\0\u02f0\0\u2b25\0\u2b54\0\u2b83\0\u2bb2\0\u02f0"+
    "\0\u2be1\0\u2c10\0\u2c3f\0\u02f0\0\u02f0\0\u2c6e\0\u02f0\0\u2c9d"+
    "\0\u2ccc\0\u2cfb\0\u2d2a\0\u2d59\0\u2d88\0\u02f0\0\u02f0\0\u2db7"+
    "\0\u031f\0\u2de6\0\u02f0\0\u02f0\0\u1d31";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[325];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\21\1\22\1\23\1\21\1\24\1\25\1\26\1\27"+
    "\1\30\2\21\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\21\1\41\1\42\1\43\1\21\1\44"+
    "\2\21\1\45\1\21\1\46\1\21\1\47\1\21\1\50"+
    "\1\51\1\52\1\53\1\54\2\31\1\55\1\56\1\57"+
    "\1\60\1\21\1\61\1\21\2\31\1\62\1\63\11\31"+
    "\1\64\41\31\1\65\1\66\1\67\11\65\1\70\2\65"+
    "\1\31\33\65\1\71\1\65\1\72\1\65\1\31\1\73"+
    "\1\74\1\75\10\31\1\76\36\31\1\71\1\31\1\72"+
    "\1\31\6\77\1\31\5\77\1\100\1\31\1\101\32\77"+
    "\1\31\1\77\1\102\1\77\1\72\1\77\1\103\1\104"+
    "\1\105\11\103\1\106\2\103\1\31\33\103\1\71\1\103"+
    "\1\72\1\103\1\107\1\110\1\111\1\112\2\107\1\113"+
    "\1\107\1\114\2\107\1\31\1\115\2\31\1\116\21\107"+
    "\1\117\1\116\1\120\1\117\1\121\1\122\1\123\1\124"+
    "\1\125\1\126\1\127\1\107\1\130\1\107\1\31\1\131"+
    "\1\132\1\133\10\31\1\134\36\31\1\71\1\31\1\72"+
    "\1\31\1\135\1\136\1\137\1\140\10\135\1\141\36\135"+
    "\1\142\1\135\1\61\1\31\1\143\1\144\1\145\1\146"+
    "\2\143\1\147\1\150\1\151\2\143\1\31\1\152\2\31"+
    "\1\153\21\143\1\154\1\153\1\155\1\154\1\156\1\157"+
    "\1\160\1\161\1\31\1\162\1\163\1\143\1\61\1\143"+
    "\1\31\1\164\1\165\1\166\10\31\1\167\33\31\1\170"+
    "\2\31\1\71\1\31\1\72\1\31\1\171\2\172\1\173"+
    "\2\171\1\31\4\171\1\31\1\174\3\31\22\171\2\31"+
    "\2\171\4\31\1\171\1\31\1\171\1\31\1\171\1\175"+
    "\1\176\1\177\1\200\3\175\1\201\4\175\1\202\11\175"+
    "\1\203\27\175\2\31\1\204\1\205\1\206\10\31\1\207"+
    "\20\31\1\210\15\31\1\71\1\31\1\72\1\31\1\211"+
    "\2\172\1\212\10\211\1\213\37\211\1\214\2\211\1\215"+
    "\2\172\1\216\10\215\1\217\42\215\1\21\2\0\3\21"+
    "\1\0\4\21\5\0\22\21\2\0\2\21\4\0\1\21"+
    "\1\0\1\21\1\220\1\21\60\0\1\22\55\0\1\21"+
    "\2\0\3\21\1\0\4\21\5\0\5\21\1\221\14\21"+
    "\2\0\2\21\4\0\1\21\1\0\1\21\1\220\2\21"+
    "\2\0\3\21\1\0\4\21\5\0\1\21\1\222\3\21"+
    "\1\223\14\21\2\0\2\21\4\0\1\21\1\0\1\21"+
    "\1\220\1\21\6\224\1\225\4\224\1\226\43\224\1\21"+
    "\2\0\2\21\1\227\1\0\4\21\5\0\16\21\1\230"+
    "\3\21\2\0\2\21\4\0\1\21\1\0\1\21\1\220"+
    "\2\21\2\0\3\21\1\0\1\21\1\30\2\21\5\0"+
    "\22\21\2\0\2\21\4\0\1\57\1\0\1\21\1\220"+
    "\1\21\14\0\1\32\61\0\1\51\22\0\1\51\1\231"+
    "\13\0\1\21\2\0\3\21\1\0\4\21\5\0\1\21"+
    "\1\232\1\21\1\233\16\21\2\0\2\21\4\0\1\21"+
    "\1\0\1\21\1\220\2\21\2\0\3\21\1\0\3\21"+
    "\1\234\5\0\22\21\2\0\2\21\4\0\1\21\1\0"+
    "\1\21\1\220\2\21\2\0\3\21\1\0\4\21\5\0"+
    "\1\21\1\235\1\21\1\236\16\21\2\0\2\21\4\0"+
    "\1\21\1\0\1\21\1\220\2\21\2\0\3\21\1\0"+
    "\4\21\5\0\5\21\1\237\14\21\2\0\2\21\4\0"+
    "\1\21\1\0\1\21\1\220\2\21\2\0\1\21\1\240"+
    "\1\21\1\0\2\21\1\241\1\21\5\0\1\242\21\21"+
    "\2\0\2\21\4\0\1\21\1\0\1\21\1\220\2\21"+
    "\2\0\3\21\1\0\4\21\5\0\15\21\1\243\4\21"+
    "\2\0\2\21\4\0\1\21\1\0\1\21\1\220\2\21"+
    "\2\0\2\21\1\244\1\0\4\21\5\0\22\21\2\0"+
    "\2\21\4\0\1\21\1\0\1\21\1\220\2\21\2\0"+
    "\2\21\1\245\1\0\3\21\1\246\5\0\5\21\1\247"+
    "\14\21\2\0\2\21\4\0\1\21\1\0\1\21\1\220"+
    "\2\21\2\0\3\21\1\0\4\21\5\0\1\21\1\250"+
    "\4\21\1\251\13\21\2\0\2\21\4\0\1\21\1\0"+
    "\1\21\1\220\2\21\2\0\3\21\1\0\4\21\5\0"+
    "\16\21\1\252\3\21\2\0\2\21\4\0\1\21\1\0"+
    "\1\21\1\220\2\21\2\0\3\21\1\0\4\21\5\0"+
    "\6\21\1\253\12\21\1\53\2\0\2\53\4\0\1\21"+
    "\1\0\1\21\1\220\1\21\17\0\1\51\37\0\1\21"+
    "\2\0\3\21\1\0\4\21\5\0\21\21\1\53\2\0"+
    "\2\53\4\0\1\21\1\0\1\21\1\220\2\21\2\0"+
    "\3\21\1\0\1\21\1\30\2\21\5\0\21\21\1\53"+
    "\2\0\2\53\4\0\1\57\1\0\1\21\1\220\1\21"+
    "\1\254\2\0\45\254\1\255\6\254\1\21\2\0\3\21"+
    "\1\0\1\21\1\256\2\21\5\0\22\21\2\0\2\21"+
    "\4\0\1\21\1\0\1\21\1\220\1\21\1\0\1\257"+
    "\61\0\1\257\1\260\51\0\1\261\2\0\13\261\1\262"+
    "\40\261\1\65\2\0\11\65\1\0\2\65\1\0\33\65"+
    "\1\0\1\65\1\0\1\65\1\0\1\66\71\0\1\70"+
    "\43\0\1\73\61\0\1\73\1\263\65\0\1\76\42\0"+
    "\6\77\1\0\6\77\2\0\32\77\1\0\1\77\1\0"+
    "\1\77\1\0\7\77\1\0\5\77\1\100\2\0\32\77"+
    "\1\0\1\77\1\0\1\77\1\0\1\77\1\103\2\0"+
    "\11\103\1\0\2\103\1\0\33\103\1\0\1\103\1\0"+
    "\1\103\1\0\1\104\71\0\1\106\42\0\1\107\2\0"+
    "\3\107\1\0\4\107\5\0\22\107\2\0\2\107\4\0"+
    "\1\107\1\0\1\107\1\264\1\107\1\0\1\110\55\0"+
    "\1\107\2\0\1\107\1\265\1\266\1\0\4\107\5\0"+
    "\22\107\2\0\2\107\4\0\1\107\1\0\1\107\1\264"+
    "\1\107\6\267\1\270\4\267\1\271\43\267\1\107\2\0"+
    "\3\107\1\0\1\107\1\114\2\107\5\0\22\107\2\0"+
    "\1\107\1\272\4\0\1\126\1\0\1\107\1\264\1\107"+
    "\14\0\1\115\61\0\1\116\22\0\1\116\1\273\13\0"+
    "\1\107\2\0\3\107\1\0\4\107\5\0\21\107\1\117"+
    "\2\0\2\117\4\0\1\107\1\0\1\107\1\264\1\107"+
    "\17\0\1\116\37\0\1\107\2\0\3\107\1\0\1\107"+
    "\1\114\2\107\5\0\21\107\1\117\2\0\2\117\4\0"+
    "\1\126\1\0\1\107\1\264\1\107\46\0\1\274\57\0"+
    "\1\274\7\0\1\124\2\0\45\124\1\0\6\124\1\107"+
    "\2\0\3\107\1\0\1\107\1\114\2\107\5\0\22\107"+
    "\2\0\2\107\4\0\1\107\1\0\1\107\1\264\1\107"+
    "\1\0\1\131\61\0\1\131\1\275\65\0\1\134\43\0"+
    "\1\136\61\0\1\136\1\276\65\0\1\141\42\0\1\143"+
    "\2\0\3\143\1\0\4\143\5\0\22\143\2\0\2\143"+
    "\4\0\1\143\1\0\1\143\1\264\1\143\1\0\1\144"+
    "\55\0\1\143\2\0\1\143\1\277\1\300\1\0\4\143"+
    "\5\0\22\143\2\0\2\143\4\0\1\143\1\0\1\143"+
    "\1\264\1\143\6\301\1\302\4\301\1\303\43\301\1\143"+
    "\2\0\3\143\1\0\4\143\5\0\16\143\1\304\3\143"+
    "\2\0\2\143\4\0\1\143\1\0\1\143\1\264\2\143"+
    "\2\0\3\143\1\0\1\143\1\151\2\143\5\0\22\143"+
    "\2\0\2\143\4\0\1\162\1\0\1\143\1\264\1\143"+
    "\14\0\1\152\61\0\1\153\22\0\1\153\1\305\13\0"+
    "\1\143\2\0\3\143\1\0\4\143\5\0\21\143\1\154"+
    "\2\0\2\154\4\0\1\143\1\0\1\143\1\264\1\143"+
    "\17\0\1\153\37\0\1\143\2\0\3\143\1\0\1\143"+
    "\1\151\2\143\5\0\21\143\1\154\2\0\2\154\4\0"+
    "\1\162\1\0\1\143\1\264\1\143\46\0\1\306\57\0"+
    "\1\306\7\0\1\161\2\0\45\161\1\0\6\161\1\143"+
    "\2\0\3\143\1\0\1\143\1\307\2\143\5\0\22\143"+
    "\2\0\2\143\4\0\1\143\1\0\1\143\1\264\1\143"+
    "\1\0\1\164\61\0\1\164\1\310\65\0\1\167\42\0"+
    "\1\170\2\0\45\170\1\0\6\170\1\171\2\0\3\171"+
    "\1\0\4\171\5\0\22\171\2\0\2\171\4\0\1\171"+
    "\1\0\1\171\1\0\1\171\1\0\2\172\1\311\53\0"+
    "\1\171\2\0\1\171\2\312\1\0\4\171\5\0\22\171"+
    "\2\0\2\171\4\0\1\171\1\0\1\171\1\0\1\171"+
    "\14\0\1\174\43\0\1\176\61\0\1\176\1\313\107\0"+
    "\1\314\34\0\1\202\77\0\1\315\22\0\1\204\61\0"+
    "\1\204\1\316\65\0\1\207\70\0\1\317\30\0\1\211"+
    "\2\0\11\211\1\0\43\211\2\0\1\211\2\320\6\211"+
    "\1\0\42\211\14\0\1\213\42\0\1\321\2\0\11\321"+
    "\1\0\10\321\1\322\31\321\1\215\2\0\11\215\1\0"+
    "\43\215\2\0\1\215\2\323\6\215\1\0\42\215\14\0"+
    "\1\217\42\0\1\21\2\0\3\21\1\0\2\21\1\246"+
    "\1\21\5\0\22\21\2\0\2\21\4\0\1\21\1\0"+
    "\1\21\1\220\2\21\2\0\3\21\1\0\4\21\5\0"+
    "\1\324\21\21\2\0\2\21\4\0\1\21\1\0\1\21"+
    "\1\220\2\21\2\0\3\21\1\0\1\325\3\21\5\0"+
    "\12\21\1\326\7\21\2\0\2\21\4\0\1\21\1\0"+
    "\1\21\1\220\1\21\57\224\1\21\2\0\3\21\1\0"+
    "\4\21\5\0\3\21\1\327\14\21\1\330\1\21\2\0"+
    "\2\21\4\0\1\21\1\0\1\21\1\220\2\21\2\0"+
    "\2\21\1\331\1\0\4\21\5\0\5\21\1\332\14\21"+
    "\2\0\2\21\4\0\1\21\1\0\1\21\1\220\2\21"+
    "\2\0\3\21\1\0\4\21\5\0\2\21\1\333\17\21"+
    "\2\0\2\21\4\0\1\21\1\0\1\21\1\220\2\21"+
    "\2\0\3\21\1\0\4\21\5\0\4\21\1\246\15\21"+
    "\2\0\2\21\4\0\1\21\1\0\1\21\1\220\2\21"+
    "\2\0\3\21\1\0\1\334\3\21\5\0\22\21\2\0"+
    "\2\21\4\0\1\21\1\0\1\21\1\220\2\21\2\0"+
    "\3\21\1\0\4\21\5\0\12\21\1\335\7\21\2\0"+
    "\2\21\4\0\1\21\1\0\1\21\1\220\2\21\2\0"+
    "\3\21\1\0\1\336\3\21\5\0\1\337\21\21\2\0"+
    "\2\21\4\0\1\21\1\0\1\21\1\220\2\21\2\0"+
    "\1\21\1\340\1\21\1\0\4\21\5\0\2\21\1\341"+
    "\1\21\1\342\15\21\2\0\2\21\4\0\1\21\1\0"+
    "\1\21\1\220\2\21\2\0\3\21\1\0\4\21\5\0"+
    "\7\21\1\343\12\21\2\0\2\21\4\0\1\21\1\0"+
    "\1\21\1\220\2\21\2\0\3\21\1\0\4\21\5\0"+
    "\2\21\1\344\17\21\2\0\2\21\4\0\1\21\1\0"+
    "\1\21\1\220\2\21\2\0\3\21\1\0\4\21\5\0"+
    "\4\21\1\345\15\21\2\0\2\21\4\0\1\21\1\0"+
    "\1\21\1\220\2\21\2\0\3\21\1\0\4\21\5\0"+
    "\5\21\1\346\14\21\2\0\2\21\4\0\1\21\1\0"+
    "\1\21\1\220\2\21\2\0\3\21\1\0\4\21\5\0"+
    "\6\21\1\347\13\21\2\0\2\21\4\0\1\21\1\0"+
    "\1\21\1\220\2\21\2\0\3\21\1\0\1\350\3\21"+
    "\5\0\22\21\2\0\2\21\4\0\1\21\1\0\1\21"+
    "\1\220\2\21\2\0\2\21\1\351\1\0\4\21\5\0"+
    "\22\21\2\0\2\21\4\0\1\21\1\0\1\21\1\220"+
    "\2\21\2\0\2\21\1\352\1\0\4\21\5\0\22\21"+
    "\2\0\2\21\4\0\1\21\1\0\1\21\1\220\2\21"+
    "\2\0\1\21\1\353\1\21\1\0\4\21\5\0\22\21"+
    "\2\0\2\21\4\0\1\21\1\0\1\21\1\220\2\21"+
    "\2\0\3\21\1\0\4\21\5\0\6\21\1\354\13\21"+
    "\2\0\2\21\4\0\1\21\1\0\1\21\1\220\2\21"+
    "\2\0\1\21\1\355\1\21\1\0\4\21\5\0\22\21"+
    "\2\0\2\21\4\0\1\21\1\0\1\21\1\220\1\21"+
    "\1\254\2\0\45\254\1\0\6\254\3\0\1\356\56\0"+
    "\1\357\53\0\1\107\2\0\1\360\2\107\1\0\4\107"+
    "\5\0\22\107\2\0\2\107\4\0\1\107\1\0\1\107"+
    "\1\264\1\107\57\267\1\107\2\0\3\107\1\0\1\107"+
    "\1\114\2\107\5\0\22\107\2\0\2\107\4\0\1\126"+
    "\1\0\1\107\1\264\1\107\46\0\1\361\1\362\12\0"+
    "\1\363\56\0\1\364\53\0\1\143\2\0\1\365\2\143"+
    "\1\0\4\143\5\0\22\143\2\0\2\143\4\0\1\143"+
    "\1\0\1\143\1\264\1\143\57\301\1\143\2\0\3\143"+
    "\1\0\4\143\5\0\5\143\1\366\14\143\2\0\2\143"+
    "\4\0\1\143\1\0\1\143\1\264\1\143\46\0\1\367"+
    "\1\370\12\0\1\371\57\0\2\172\51\0\1\171\2\172"+
    "\1\173\2\171\1\0\4\171\5\0\22\171\2\0\2\171"+
    "\4\0\1\171\1\0\1\171\1\0\1\171\3\0\1\372"+
    "\100\0\1\373\34\0\1\374\57\0\1\375\52\0\1\211"+
    "\2\172\1\212\10\211\1\0\42\211\1\321\2\0\11\321"+
    "\1\0\43\321\2\0\6\321\1\376\2\321\1\0\42\321"+
    "\1\215\2\172\1\216\10\215\1\0\42\215\1\21\2\0"+
    "\3\21\1\0\4\21\5\0\1\377\21\21\2\0\2\21"+
    "\4\0\1\21\1\0\1\21\1\220\2\21\2\0\3\21"+
    "\1\0\3\21\1\u0100\5\0\22\21\2\0\2\21\4\0"+
    "\1\21\1\0\1\21\1\220\2\21\2\0\3\21\1\0"+
    "\4\21\5\0\1\21\1\u0101\20\21\2\0\2\21\4\0"+
    "\1\21\1\0\1\21\1\220\2\21\2\0\1\21\1\u0102"+
    "\1\21\1\0\4\21\5\0\13\21\1\350\6\21\2\0"+
    "\2\21\4\0\1\21\1\0\1\21\1\220\2\21\2\0"+
    "\3\21\1\0\4\21\5\0\1\21\1\u0103\20\21\2\0"+
    "\2\21\4\0\1\21\1\0\1\21\1\220\2\21\2\0"+
    "\1\21\1\u0104\1\21\1\0\4\21\5\0\22\21\2\0"+
    "\2\21\4\0\1\21\1\0\1\21\1\220\2\21\2\0"+
    "\3\21\1\0\4\21\5\0\3\21\1\u0105\16\21\2\0"+
    "\2\21\4\0\1\21\1\0\1\21\1\220\2\21\2\0"+
    "\3\21\1\0\4\21\5\0\13\21\1\u0106\6\21\2\0"+
    "\2\21\4\0\1\21\1\0\1\21\1\220\2\21\2\0"+
    "\3\21\1\0\4\21\5\0\12\21\1\u0107\1\u0108\6\21"+
    "\2\0\2\21\4\0\1\21\1\0\1\21\1\220\2\21"+
    "\2\0\3\21\1\0\4\21\5\0\2\21\1\u0109\17\21"+
    "\2\0\2\21\4\0\1\21\1\0\1\21\1\220\2\21"+
    "\2\0\3\21\1\0\4\21\5\0\1\u010a\21\21\2\0"+
    "\2\21\4\0\1\21\1\0\1\21\1\220\2\21\2\0"+
    "\3\21\1\0\4\21\5\0\7\21\1\u010b\12\21\2\0"+
    "\2\21\4\0\1\21\1\0\1\21\1\220\2\21\2\0"+
    "\3\21\1\0\1\u010c\3\21\5\0\22\21\2\0\2\21"+
    "\4\0\1\21\1\0\1\21\1\220\2\21\2\0\3\21"+
    "\1\0\4\21\5\0\4\21\1\u010c\15\21\2\0\2\21"+
    "\4\0\1\21\1\0\1\21\1\220\2\21\2\0\3\21"+
    "\1\0\1\u010d\3\21\5\0\6\21\1\u010e\6\21\1\u010f"+
    "\1\21\1\u0110\2\21\2\0\2\21\4\0\1\21\1\0"+
    "\1\21\1\220\2\21\2\0\3\21\1\0\4\21\5\0"+
    "\5\21\1\u0111\14\21\2\0\2\21\4\0\1\21\1\0"+
    "\1\21\1\220\2\21\2\0\3\21\1\0\4\21\5\0"+
    "\5\21\1\u0112\14\21\2\0\2\21\4\0\1\21\1\0"+
    "\1\21\1\220\2\21\2\0\3\21\1\0\4\21\5\0"+
    "\3\21\1\u0113\16\21\2\0\2\21\4\0\1\21\1\0"+
    "\1\21\1\220\2\21\2\0\1\21\1\246\1\21\1\0"+
    "\4\21\5\0\22\21\2\0\2\21\4\0\1\21\1\0"+
    "\1\21\1\220\2\21\2\0\3\21\1\0\4\21\5\0"+
    "\15\21\1\u0114\4\21\2\0\2\21\4\0\1\21\1\0"+
    "\1\21\1\220\2\21\2\0\3\21\1\0\4\21\5\0"+
    "\11\21\1\350\10\21\2\0\2\21\4\0\1\21\1\0"+
    "\1\21\1\220\2\21\2\0\3\21\1\0\4\21\5\0"+
    "\3\21\1\u0115\16\21\2\0\2\21\4\0\1\21\1\0"+
    "\1\21\1\220\2\21\2\0\3\21\1\0\4\21\5\0"+
    "\1\u0116\21\21\2\0\2\21\4\0\1\21\1\0\1\21"+
    "\1\220\2\21\2\0\3\21\1\0\4\21\5\0\2\21"+
    "\1\u0117\17\21\2\0\2\21\4\0\1\21\1\0\1\21"+
    "\1\220\1\21\4\0\1\257\56\0\1\73\52\0\1\107"+
    "\2\0\1\107\1\265\1\107\1\0\4\107\5\0\22\107"+
    "\2\0\2\107\4\0\1\107\1\0\1\107\1\264\1\107"+
    "\4\0\1\131\56\0\1\136\52\0\1\143\2\0\1\143"+
    "\1\277\1\143\1\0\4\143\5\0\22\143\2\0\2\143"+
    "\4\0\1\143\1\0\1\143\1\264\2\143\2\0\1\143"+
    "\1\u0118\1\143\1\0\4\143\5\0\22\143\2\0\2\143"+
    "\4\0\1\143\1\0\1\143\1\264\1\143\4\0\1\164"+
    "\56\0\1\176\56\0\1\u0119\56\0\1\204\75\0\1\u011a"+
    "\33\0\1\321\2\0\11\321\1\0\6\321\1\u011b\33\321"+
    "\1\21\2\0\3\21\1\0\4\21\5\0\10\21\1\u011c"+
    "\11\21\2\0\2\21\4\0\1\21\1\0\1\21\1\220"+
    "\2\21\2\0\2\21\1\u011d\1\0\4\21\5\0\22\21"+
    "\2\0\2\21\4\0\1\21\1\0\1\21\1\220\2\21"+
    "\2\0\3\21\1\0\4\21\5\0\14\21\1\u011e\5\21"+
    "\2\0\2\21\4\0\1\21\1\0\1\21\1\220\2\21"+
    "\2\0\3\21\1\0\4\21\5\0\4\21\1\u011f\15\21"+
    "\2\0\2\21\4\0\1\21\1\0\1\21\1\220\2\21"+
    "\2\0\3\21\1\0\4\21\5\0\17\21\1\350\2\21"+
    "\2\0\2\21\4\0\1\21\1\0\1\21\1\220\2\21"+
    "\2\0\3\21\1\0\4\21\5\0\1\350\21\21\2\0"+
    "\2\21\4\0\1\21\1\0\1\21\1\220\2\21\2\0"+
    "\3\21\1\0\3\21\1\246\5\0\22\21\2\0\2\21"+
    "\4\0\1\21\1\0\1\21\1\220\2\21\2\0\3\21"+
    "\1\0\4\21\5\0\6\21\1\246\13\21\2\0\2\21"+
    "\4\0\1\21\1\0\1\21\1\220\2\21\2\0\3\21"+
    "\1\0\3\21\1\u0120\5\0\22\21\2\0\2\21\4\0"+
    "\1\21\1\0\1\21\1\220\2\21\2\0\3\21\1\0"+
    "\4\21\5\0\16\21\1\u0121\3\21\2\0\2\21\4\0"+
    "\1\21\1\0\1\21\1\220\2\21\2\0\3\21\1\0"+
    "\4\21\5\0\12\21\1\u0122\7\21\2\0\2\21\4\0"+
    "\1\21\1\0\1\21\1\220\2\21\2\0\3\21\1\0"+
    "\4\21\5\0\6\21\1\u0123\13\21\2\0\2\21\4\0"+
    "\1\21\1\0\1\21\1\220\2\21\2\0\2\21\1\u0124"+
    "\1\0\4\21\5\0\22\21\2\0\2\21\4\0\1\21"+
    "\1\0\1\21\1\220\2\21\2\0\3\21\1\0\4\21"+
    "\5\0\15\21\1\u0125\4\21\2\0\2\21\4\0\1\21"+
    "\1\0\1\21\1\220\2\21\2\0\3\21\1\0\4\21"+
    "\5\0\1\21\1\u0126\20\21\2\0\2\21\4\0\1\21"+
    "\1\0\1\21\1\220\2\21\2\0\3\21\1\0\4\21"+
    "\5\0\16\21\1\u0127\3\21\2\0\2\21\4\0\1\21"+
    "\1\0\1\21\1\220\2\21\2\0\3\21\1\0\4\21"+
    "\5\0\13\21\1\u0128\6\21\2\0\2\21\4\0\1\21"+
    "\1\0\1\21\1\220\2\21\2\0\3\21\1\0\4\21"+
    "\5\0\1\21\1\u0129\20\21\2\0\2\21\4\0\1\21"+
    "\1\0\1\21\1\220\2\21\2\0\3\21\1\0\4\21"+
    "\5\0\1\u012a\21\21\2\0\2\21\4\0\1\21\1\0"+
    "\1\21\1\220\2\21\2\0\3\21\1\0\4\21\5\0"+
    "\5\21\1\u012b\14\21\2\0\2\21\4\0\1\21\1\0"+
    "\1\21\1\220\2\21\2\0\3\21\1\0\4\21\5\0"+
    "\1\u012c\21\21\2\0\2\21\4\0\1\21\1\0\1\21"+
    "\1\220\1\21\20\0\1\u012d\36\0\1\321\2\0\11\321"+
    "\1\0\15\321\1\u012e\24\321\1\21\2\0\3\21\1\0"+
    "\4\21\5\0\3\21\1\u012f\16\21\2\0\2\21\4\0"+
    "\1\21\1\0\1\21\1\220\2\21\2\0\1\21\1\u0130"+
    "\1\21\1\0\4\21\5\0\22\21\2\0\2\21\4\0"+
    "\1\21\1\0\1\21\1\220\2\21\2\0\3\21\1\0"+
    "\4\21\5\0\5\21\1\350\14\21\2\0\2\21\4\0"+
    "\1\21\1\0\1\21\1\220\2\21\2\0\3\21\1\0"+
    "\4\21\5\0\3\21\1\u0131\16\21\2\0\2\21\4\0"+
    "\1\21\1\0\1\21\1\220\2\21\2\0\3\21\1\0"+
    "\1\u011e\3\21\5\0\22\21\2\0\2\21\4\0\1\21"+
    "\1\0\1\21\1\220\2\21\2\0\3\21\1\0\4\21"+
    "\5\0\3\21\1\u0132\16\21\2\0\2\21\4\0\1\21"+
    "\1\0\1\21\1\220\2\21\2\0\3\21\1\0\4\21"+
    "\5\0\1\21\1\u0133\20\21\2\0\2\21\4\0\1\21"+
    "\1\0\1\21\1\220\2\21\2\0\3\21\1\0\4\21"+
    "\5\0\20\21\1\u0134\1\21\2\0\2\21\4\0\1\21"+
    "\1\0\1\21\1\220\2\21\2\0\2\21\1\u0135\1\0"+
    "\4\21\5\0\22\21\2\0\2\21\4\0\1\21\1\0"+
    "\1\21\1\220\2\21\2\0\3\21\1\0\4\21\5\0"+
    "\6\21\1\u0136\13\21\2\0\2\21\4\0\1\21\1\0"+
    "\1\21\1\220\2\21\2\0\3\21\1\0\1\u0137\3\21"+
    "\5\0\22\21\2\0\2\21\4\0\1\21\1\0\1\21"+
    "\1\220\2\21\2\0\2\21\1\u0138\1\0\4\21\5\0"+
    "\22\21\2\0\2\21\4\0\1\21\1\0\1\21\1\220"+
    "\2\21\2\0\3\21\1\0\4\21\5\0\1\u0139\21\21"+
    "\2\0\2\21\4\0\1\21\1\0\1\21\1\220\2\21"+
    "\2\0\3\21\1\0\3\21\1\u013a\5\0\22\21\2\0"+
    "\2\21\4\0\1\21\1\0\1\21\1\220\1\21\20\0"+
    "\1\u013b\36\0\1\321\2\0\11\321\1\0\16\321\1\u013c"+
    "\23\321\1\21\2\0\3\21\1\0\4\21\5\0\2\21"+
    "\1\u0113\17\21\2\0\2\21\4\0\1\21\1\0\1\21"+
    "\1\220\2\21\2\0\3\21\1\0\4\21\5\0\2\21"+
    "\1\341\17\21\2\0\2\21\4\0\1\21\1\0\1\21"+
    "\1\220\2\21\2\0\3\21\1\0\4\21\5\0\6\21"+
    "\1\u0105\13\21\2\0\2\21\4\0\1\21\1\0\1\21"+
    "\1\220\2\21\2\0\1\21\1\350\1\21\1\0\4\21"+
    "\5\0\22\21\2\0\2\21\4\0\1\21\1\0\1\21"+
    "\1\220\2\21\2\0\3\21\1\0\4\21\5\0\1\u013d"+
    "\21\21\2\0\2\21\4\0\1\21\1\0\1\21\1\220"+
    "\2\21\2\0\3\21\1\0\4\21\5\0\12\21\1\u013e"+
    "\7\21\2\0\2\21\4\0\1\21\1\0\1\21\1\220"+
    "\2\21\2\0\3\21\1\0\4\21\5\0\20\21\1\u013f"+
    "\1\21\2\0\2\21\4\0\1\21\1\0\1\21\1\220"+
    "\2\21\2\0\3\21\1\0\4\21\5\0\7\21\1\u0140"+
    "\12\21\2\0\2\21\4\0\1\21\1\0\1\21\1\220"+
    "\1\21\40\0\1\u0141\16\0\1\321\2\0\11\321\1\0"+
    "\3\321\1\u0142\36\321\1\21\2\0\3\21\1\0\4\21"+
    "\5\0\5\21\1\u0143\14\21\2\0\2\21\4\0\1\21"+
    "\1\0\1\21\1\220\2\21\2\0\3\21\1\0\4\21"+
    "\5\0\5\21\1\u0144\14\21\2\0\2\21\4\0\1\21"+
    "\1\0\1\21\1\220\1\21\1\321\2\0\11\321\1\0"+
    "\10\321\1\u0145\31\321";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11797];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\20\0\1\1\1\11\6\1\1\11\1\1\2\11\21\1"+
    "\1\11\1\1\2\11\4\1\1\11\2\1\3\11\5\1"+
    "\2\11\1\1\1\11\3\1\1\11\14\1\1\11\1\1"+
    "\3\11\3\1\2\11\3\1\1\11\1\1\1\11\16\1"+
    "\2\11\10\1\2\11\5\1\1\11\13\1\1\11\3\1"+
    "\1\0\1\11\1\0\2\1\1\0\23\1\1\11\1\1"+
    "\1\11\1\1\1\0\2\1\1\11\2\1\1\0\1\11"+
    "\1\0\1\1\1\0\5\1\1\0\1\11\1\0\1\1"+
    "\1\0\3\1\1\0\2\1\1\0\1\11\1\1\1\0"+
    "\36\1\2\0\1\1\4\0\2\1\7\0\33\1\1\11"+
    "\1\0\22\1\1\0\15\1\1\0\5\1\1\11\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[325];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	private int after_argument;
	private Stack<Integer> stack = new Stack<Integer>();

    public void yypushstate(int newState) {
      stack.push(yystate());

      yybegin(newState);
    }

    public void yypopstate() {
        Integer prev = YYINITIAL;

        if(!stack.empty()){
            prev = stack.pop();
        }
      yybegin(prev);

    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  SpjLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(YYINITIAL);
                                                            return SpjTypes.VARIABLE;
            } 
            // fall through
          case 93: break;
          case 2: 
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 94: break;
          case 3: 
            { return TokenType.ERROR_ELEMENT;
            } 
            // fall through
          case 95: break;
          case 4: 
            { yybegin(YYINITIAL);
                                                            return SpjTypes.NUMBER;
            } 
            // fall through
          case 96: break;
          case 5: 
            { yypushstate(DEF_PROCEDURE); return SpjTypes.LBLO;
            } 
            // fall through
          case 97: break;
          case 6: 
            { return SpjTypes.RBLO;
            } 
            // fall through
          case 98: break;
          case 7: 
            { yybegin(YYINITIAL); return SpjTypes.SEPARATOR;
            } 
            // fall through
          case 99: break;
          case 8: 
            { yybegin(YYINITIAL); return SpjTypes.OPER;
            } 
            // fall through
          case 100: break;
          case 9: 
            { yybegin(YYINITIAL); return SpjTypes.COMMENT;
            } 
            // fall through
          case 101: break;
          case 10: 
            { yybegin(YYINITIAL); return SpjTypes.COMMA;
            } 
            // fall through
          case 102: break;
          case 11: 
            { yypopstate();return SpjTypes.RPARC;
            } 
            // fall through
          case 103: break;
          case 12: 
            { yypushstate(INSIDE_CONDITION); return SpjTypes.LPARC;
            } 
            // fall through
          case 104: break;
          case 13: 
            { yybegin(CALL_COMMAND); return SpjTypes.COMMAND_CALL;
            } 
            // fall through
          case 105: break;
          case 14: 
            { yybegin(CALL_COMMAND);return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 106: break;
          case 15: 
            { yybegin(CALL_COMMAND); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 107: break;
          case 16: 
            { yypopstate(); return SpjTypes.RPAR;
            } 
            // fall through
          case 108: break;
          case 17: 
            { yypushstate(INSIDE_ARGUMENTS); return SpjTypes.LPAR;
            } 
            // fall through
          case 109: break;
          case 18: 
            { yypopstate();return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 110: break;
          case 19: 
            { yybegin(CALL_KEYWORD); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 111: break;
          case 20: 
            { yybegin(DEF_PROCEDURE); return SpjTypes.PROCEDURE;
            } 
            // fall through
          case 112: break;
          case 21: 
            { yybegin(DEF_PROCEDURE); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 113: break;
          case 22: 
            { yypopstate(); return SpjTypes.RBLO;
            } 
            // fall through
          case 114: break;
          case 23: 
            { yybegin(DEF_PROCEDURE); return SpjTypes.RPAR;
            } 
            // fall through
          case 115: break;
          case 24: 
            { yybegin(CALL_PROCEDURE); return SpjTypes.PROCEDURE_CALL;
            } 
            // fall through
          case 116: break;
          case 25: 
            { yybegin(CALL_PROCEDURE);return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 117: break;
          case 26: 
            { yybegin(CALL_PROCEDURE); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 118: break;
          case 27: 
            { yybegin(INSIDE_ARGUMENTS); return SpjTypes.ARGUMENT;
            } 
            // fall through
          case 119: break;
          case 28: 
            { yybegin(INSIDE_ARGUMENTS); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 120: break;
          case 29: 
            { yybegin(INSIDE_ARGUMENTS); return SpjTypes.NUMBER;
            } 
            // fall through
          case 121: break;
          case 30: 
            { yybegin(INSIDE_ARGUMENTS); return SpjTypes.OPER;
            } 
            // fall through
          case 122: break;
          case 31: 
            { yybegin(INSIDE_ARGUMENTS); return SpjTypes.COMMENT;
            } 
            // fall through
          case 123: break;
          case 32: 
            { yybegin(INSIDE_ARGUMENTS); return SpjTypes.COMMA;
            } 
            // fall through
          case 124: break;
          case 33: 
            { yypushback(1); yypopstate(); /*return SpjTypes.RPAR;*/
            } 
            // fall through
          case 125: break;
          case 34: 
            { yypushback(1);yypushstate(INSIDE_NESTED_ARGUMENTS); /*return SpjTypes.LPAR;*/
            } 
            // fall through
          case 126: break;
          case 35: 
            { yybegin(INSIDE_NESTED_ARGUMENTS);return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 127: break;
          case 36: 
            { yybegin(INSIDE_NESTED_ARGUMENTS); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 128: break;
          case 37: 
            { yypushback(1);yypopstate();/*return TokenType.ERROR_ELEMENT;*/
            } 
            // fall through
          case 129: break;
          case 38: 
            { yybegin(CALL_CONDITION);return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 130: break;
          case 39: 
            { yybegin(CALL_CONDITION); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 131: break;
          case 40: 
            { yypopstate(); /*return SpjTypes.RPARC;*/
            } 
            // fall through
          case 132: break;
          case 41: 
            { yybegin(INSIDE_CONDITION); return SpjTypes.VARIABLE;
            } 
            // fall through
          case 133: break;
          case 42: 
            { yybegin(INSIDE_CONDITION); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 134: break;
          case 43: 
            { yybegin(INSIDE_CONDITION); return SpjTypes.NUMBER;
            } 
            // fall through
          case 135: break;
          case 44: 
            { yybegin(INSIDE_CONDITION); return SpjTypes.OPER;
            } 
            // fall through
          case 136: break;
          case 45: 
            { yybegin(INSIDE_CONDITION); return SpjTypes.COMMENT;
            } 
            // fall through
          case 137: break;
          case 46: 
            { yypopstate(); return SpjTypes.RPARC;
            } 
            // fall through
          case 138: break;
          case 47: 
            { yybegin(INSIDE_FOR_ARGUMENTS); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 139: break;
          case 48: 
            { yybegin(INSIDE_FOR_ARGUMENTS); return SpjTypes.COMMENT;
            } 
            // fall through
          case 140: break;
          case 49: 
            { yypushstate(INSIDE_IMPORT); return SpjTypes.IMPORT;
            } 
            // fall through
          case 141: break;
          case 50: 
            { yypushstate(INSIDE_IMPORT); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 142: break;
          case 51: 
            { yypopstate(); yypushback(yytext().length()); return SpjTypes.BAD_CHARACTER;
            } 
            // fall through
          case 143: break;
          case 52: 
            { yybegin(AFTER_ELSE); return SpjTypes.CRLF;
            } 
            // fall through
          case 144: break;
          case 53: 
            { yybegin(AFTER_ELSE); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 145: break;
          case 54: 
            { yypopstate(); return SpjTypes.CRLF;
            } 
            // fall through
          case 146: break;
          case 55: 
            { yybegin(AFTER_EXCEPT); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 147: break;
          case 56: 
            { yybegin(INSIDE_DOC_COMMENT); return SpjTypes.DOC_COMMENT_TEXT;
            } 
            // fall through
          case 148: break;
          case 57: 
            { yybegin(INSIDE_DOC_COMMENT); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 149: break;
          case 58: 
            { yybegin(INSIDE_DOC_COMMENT_PARAM); return SpjTypes.DOC_COMMENT_TAG;
            } 
            // fall through
          case 150: break;
          case 59: 
            { yybegin(INSIDE_DOC_COMMENT); return SpjTypes.DOC_COMMENT_VALUE;
            } 
            // fall through
          case 151: break;
          case 60: 
            { yybegin(INSIDE_DOC_COMMENT_PARAM); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 152: break;
          case 61: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { String __str__ = yytext().toString();
                                                            if(
                                                               __str__.equals("trap") ||
                                                               __str__.equals("throw") ||
                                                               __str__.equals("session") ||
                                                               __str__.equals("local") ||
                                                               __str__.equals("section") ||
                                                               __str__.equals("end") ||
                                                               __str__.equals("break") ||
                                                               __str__.equals("commit") ||
                                                               __str__.equals("rollback") ||
                                                               __str__.equals("transaction") ||
                                                               __str__.equals("compute") ||
                                                               __str__.equals("put") ||
                                                               __str__.equals("remove") ||
                                                               __str__.equals("output") ||
                                                               __str__.equals("print") ||
                                                               __str__.equals("sendmail") ||
                                                               __str__.equals("fork") ||
                                                               __str__.equals("last") ||
                                                               __str__.equals("next")
                                                               ){
                                                                   yypushstate(CALL_KEYWORD); return SpjTypes.KEYWORD;
                                                               }else if(__str__.equals("return")){
                                                                   yypushstate(CALL_KEYWORD); return SpjTypes.RETURN;
                                                               }else if(__str__.equals("for")){
                                                                    yypushstate(INSIDE_FOR_ARGUMENTS); return SpjTypes.FOR;
                                                               }else if(__str__.equals("endfor")){
                                                                    yypushstate(CALL_KEYWORD); return SpjTypes.ENDFOR;
                                                               }else if(
                                                               __str__.equals("if")
                                                               ){
                                                                yypushstate(CALL_CONDITION); return SpjTypes.IF;
                                                               }else if(__str__.equals("while")){
                                                                yypushstate(CALL_CONDITION); return SpjTypes.WHILE;
                                                               }else if(__str__.equals("catch")){
                                                                 yypushstate(CALL_KEYWORD); return SpjTypes.CATCH;
                                                               }else if(__str__.equals("except")){
                                                                 yypushstate(AFTER_EXCEPT); return SpjTypes.EXCEPT;
                                                                }else{
                                                                yypushstate(CALL_COMMAND);
                                                                return SpjTypes.FUNCTION;
                                                               }
            } 
            // fall through
          case 153: break;
          case 62: 
            { yybegin(YYINITIAL); return SpjTypes.STRING;
            } 
            // fall through
          case 154: break;
          case 63: 
            { yypushstate(CALL_CONDITION); return SpjTypes.IF;
            } 
            // fall through
          case 155: break;
          case 64: 
            { yypushstate(INSIDE_DOC_COMMENT); return SpjTypes.DOC_COMMENT;
            } 
            // fall through
          case 156: break;
          case 65: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 157: break;
          case 66: 
            { yybegin(WAITING_VALUE); return SpjTypes.PROCEDURE;
            } 
            // fall through
          case 158: break;
          case 67: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { yypushstate(CALL_COMMAND); return SpjTypes.FUNCTION;
            } 
            // fall through
          case 159: break;
          case 68: 
            { yybegin(INSIDE_ARGUMENTS); return SpjTypes.STRING;
            } 
            // fall through
          case 160: break;
          case 69: 
            { yybegin(INSIDE_ARGUMENTS); return SpjTypes.ORAND;
            } 
            // fall through
          case 161: break;
          case 70: 
            { yybegin(INSIDE_CONDITION); return SpjTypes.STRING;
            } 
            // fall through
          case 162: break;
          case 71: 
            { yybegin(INSIDE_CONDITION); return SpjTypes.ORAND;
            } 
            // fall through
          case 163: break;
          case 72: 
            { yypushstate(CALL_CONDITION); return SpjTypes.ELSEIF;
            } 
            // fall through
          case 164: break;
          case 73: 
            { yybegin(YYINITIAL); return SpjTypes.TRY;
            } 
            // fall through
          case 165: break;
          case 74: 
            { yypushstate(CALL_KEYWORD); return SpjTypes.KEYWORD;
            } 
            // fall through
          case 166: break;
          case 75: 
            { yypushstate(INSIDE_FOR_ARGUMENTS); return SpjTypes.FOR;
            } 
            // fall through
          case 167: break;
          case 76: 
            { yybegin(YYINITIAL); return SpjTypes.THEN;
            } 
            // fall through
          case 168: break;
          case 77: 
            { yypushstate(CALL_COMMAND); return SpjTypes.CALL;
            } 
            // fall through
          case 169: break;
          case 78: 
            { yypushstate(AFTER_ELSE); return SpjTypes.ELSE;
            } 
            // fall through
          case 170: break;
          case 79: 
            { yybegin(INSIDE_CONDITION); return SpjTypes.THEN;
            } 
            // fall through
          case 171: break;
          case 80: 
            { yypopstate(); return SpjTypes.THEN;
            } 
            // fall through
          case 172: break;
          case 81: 
            { yypushstate(CALL_KEYWORD); return SpjTypes.CATCH;
            } 
            // fall through
          case 173: break;
          case 82: 
            { yybegin(YYINITIAL); return SpjTypes.ENDIF;
            } 
            // fall through
          case 174: break;
          case 83: 
            { yypushstate(CALL_CONDITION); return SpjTypes.WHILE;
            } 
            // fall through
          case 175: break;
          case 84: 
            { yypushstate(CALL_KEYWORD); return SpjTypes.RETURN;
            } 
            // fall through
          case 176: break;
          case 85: 
            { yybegin(YYINITIAL); return SpjTypes.ENDTRY;
            } 
            // fall through
          case 177: break;
          case 86: 
            { yybegin(YYINITIAL); return SpjTypes.ENDFOR;
            } 
            // fall through
          case 178: break;
          case 87: 
            { yybegin(AFTER_EXCEPT); return SpjTypes.EXCEPT;
            } 
            // fall through
          case 179: break;
          case 88: 
            { yypushstate(CALL_PROCEDURE); return SpjTypes.PERFORM;
            } 
            // fall through
          case 180: break;
          case 89: 
            { yybegin(YYINITIAL); return SpjTypes.FINALLY;
            } 
            // fall through
          case 181: break;
          case 90: 
            { yypopstate(); return SpjTypes.FINALLY;
            } 
            // fall through
          case 182: break;
          case 91: 
            { yybegin(YYINITIAL); return SpjTypes.ENDWHILE;
            } 
            // fall through
          case 183: break;
          case 92: 
            { yybegin(INSIDE_DOC_COMMENT); return SpjTypes.DOC_COMMENT_TAG;
            } 
            // fall through
          case 184: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
